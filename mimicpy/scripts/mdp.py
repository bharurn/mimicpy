from .script import Script
from ..utils.errors import ParserError
from ..utils.constants import BOHR_RADIUS, ATOMIC_TIME_UNIT


class Mdp(Script):

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.title = 'MiMiC run'
        if 'title' in kwargs:
            self.title = kwargs['title']

    def __str__(self):
        mdp = f'; Gromacs parameters for {self.title} generated by MiMiCPy\n'
        for parameter in self.parameter():
            attribute = getattr(self, parameter)
            if attribute is None or parameter == 'title':
                continue
            parameter = parameter.replace('_', '-')
            mdp += f'{parameter} = {attribute}\n'
        return mdp

    @classmethod
    def from_string(cls, string):
        kwargs = {}
        for i, line in enumerate(string.splitlines()):
            line = line.strip()
            if line.startswith(';'):
                continue
            assignment = line.split(';')[0].split('=')
            if len(assignment) != 2:
                raise ParserError(file_type='mdp', line_number=i)
            parameter, attribute = assignment
            kwargs.update({parameter.strip(): attribute.strip()})
        return cls(**kwargs)


    def check(self):
        mdp_errors = []
        # TODO: Think of a better way for checks
        if not self.hasparam('integrator') or self.integrator != 'mimic':
            mdp_errors.append("\tWrong integrator for MiMiC run, set integrator = mimic")
        if not self.hasparam('qmmm_grps') or self.qmmm_grps != 'QMatoms':
            mdp_errors.append("\tIndex group for QM atoms does not correspond to ndx file, set QMMM-grps = QMatoms")
        if self.hasparam('constraints') and self.constraints != 'none':
            mdp_errors.append("\tMolecule should not be constrained, set constraints = none")
        if self.hasparam('tcoupl') and self.tcoupl != 'no':
            mdp_errors.append("\tTemperature coupling will not be active, set tcoupl = no")
        if self.hasparam('pcoupl') and self.pcoupl != 'no':
            mdp_errors.append("\tPressure coupling will not be active, set pcoupl = no")
        # TODO: Check for more errors in mdp file
        if self.hasparam('nsteps'):
            nsteps = int(self.nsteps)
        else:
            mdp_errors.append("\tNumber of steps is not given, using default value")
            nsteps = 1000
        if self.hasparam('dt'):
            dt = float(self.dt)/ATOMIC_TIME_UNIT
        else:
            mdp_errors.append("\tTimestep is not given, using default value")
            dt = 5.0
        return nsteps, dt, "\n".join(mdp_errors)