from .script import Script
from ..utils.errors import ParserError
from ..utils.constants import ATOMIC_TIME_UNIT


class Mdp(Script):

    def __init__(self, **kwargs):
        super().__init__()
        if 'title' not in kwargs:
            kwargs['title'] = 'MiMiC Run'

        for key, value in kwargs.items():
            setattr(self, key, value)

    def __str__(self):
        mdp = f'; Gromacs parameters for {self.title} generated by MiMiCPy\n'
        for parameter in self.parameters:
            attribute = getattr(self, parameter)
            if attribute is None or parameter == 'title':
                continue
            parameter = parameter.replace('_', '-')
            mdp += f'{parameter} = {attribute}\n'
        return mdp

    @classmethod
    def from_string(cls, string):
        kwargs = {}
        for i, line in enumerate(string.splitlines()):
            line = line.strip()
            if line.startswith(';'):
                continue
            assignment = line.split(';')[0].split('=')
            if len(assignment) != 2:
                raise ParserError(file_type='mdp', line_number=i)
            parameter, attribute = assignment
            kwargs.update({parameter.strip(): attribute.strip()})
        return cls(**kwargs)

    def check(self):
        mdp_errors = []
        
        # TODO: Think of a better way for checks
        if not self.has_parameter('integrator') or self.integrator != 'mimic':
            mdp_errors.append('Wrong integrator for MiMiC run, set integrator = mimic')
        if not self.has_parameter('qmmm_grps') or self.qmmm_grps != 'QMatoms':
            mdp_errors.append('Index group for QM atoms is not QMatoms, set QMMM-grps = QMatoms')
        if self.has_parameter('constraints') and self.constraints != 'none':
            mdp_errors.append('Molecules should not be constrained by GROMACS, set constraints = none')
        if self.has_parameter('tcoupl') and self.tcoupl != 'no':
            mdp_errors.append('Temperature coupling will not be active, set tcoupl = no')
        if self.has_parameter('pcoupl') and self.pcoupl != 'no':
            mdp_errors.append('Pressure coupling will not be active, set pcoupl = no')
        # TODO: Check for more errors in mdp file
        
        if self.has_parameter('nsteps'):
            nsteps = int(self.nsteps)
        else:
            mdp_errors.append('Number of steps is not given, using default value')
            nsteps = 1000
        if self.has_parameter('dt'):
            dt = float(self.dt)/ATOMIC_TIME_UNIT
        else:
            mdp_errors.append('Timestep is not given, using default value')
            dt = 5.0
        
        if mdp_errors != []:
            mdp_errors = ['The following md parameters are inconsistent with MiMiC runs:'] + mdp_errors
            
        return nsteps, dt, mdp_errors
