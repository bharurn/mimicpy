from .script import Script


class Pseudopotential:

    def __init__(self, coords, pp_type='MT_BLYP.psp', labels='KLEINMAN-BYLANDER', lmax='S'):
        self.coords = [coords]
        self.pp_type = pp_type
        self.labels = labels
        self.lmax = lmax

    def __str__(self):
        if not self.pp_type.startswith('_'):
            self.pp_type = '_' + self.pp_type
        if not self.labels.startswith(' ') and self.labels != '':
            self.labels = ' ' + self.labels

        pp_block = '{}{}\n'.format(self.pp_type, self.labels)
        pp_block += '    LMAX={}\n'.format(self.lmax.upper())
        pp_block += '    {}\n'.format(len(self.coords))

        for row in self.coords:
            pp_block += ' {:>18.12f} {:>18.12f} {:>18.12f}\n'.format(row[0], row[1], row[2])

        return pp_block

    @classmethod
    def from_string():
        pass


class Section(Script):

    def __str__(self):
        section_string = ''
        for keyword in self.parameters:
            value = getattr(self, keyword)
            if isinstance(value, Pseudopotential):
                section_string += '\n*{}'.format(keyword.upper().replace('_', ' '))
            else:
                section_string += '\n{}\n'.format(keyword.upper().replace('_', ' '))
            if value is not True:
                section_string += '{}'.format(str(value))
        return section_string

    def from_string(self):
        pass


class CpmdScript(Script):

    def __init__(self, *sections):
        super().__init__()
        if 'INFO' not in sections:
            setattr(self, 'INFO', '\nGENERATED BY MIMICPY')
        for section in sections:
            setattr(self, section, Section())

    def __str__(self):
        cpmd_script = ''
        for section in self.parameters:
            section_string = str(getattr(self, section))
            cpmd_script += '\n&{}{}\n&END\n'.format(section.upper(), section_string)
        return cpmd_script

    def from_string(self):
        pass